- platform: miflora
  mac: '80:EA:CA:88:E3:EB' 
  name: Poinsettia
- platform: mqtt
  name: "Christmas Lights"
  state_topic: "christmas/sensor0"
  value_template: "{{ value_json.status }}"
- platform: mqtt_room
  device_id: "b5b182c7eab14988aa99b5c1517008d9-1-38047"
  name: Dumpster
  state_topic: room_presence
  away_timeout: 30
- platform: mqtt_room
  device_id: "b5b182c7eab14988aa99b5c1517008d9-1-39839"
  name: F150
  state_topic: room_presence
  away_timeout: 30
- platform: mqtt_room
  device_id: "b5b182c7eab14988aa99b5c1517008d9-1-31494"
  name: Porsche 
  state_topic: room_presence
  away_timeout: 30
- platform: template 
  sensors:
    calculated_system_start_time:
      friendly_name: Calculated Day Start
      device_class: timestamp
      value_template: >- 
        {% set j_start = (strptime(states('input_datetime.jeanette_start_time'), '%H:%M:%S')) %}
        {% set sys_start = (strptime(states('input_datetime.system_start_time'), '%H:%M:%S')) %}
        {% set start_dates =[now().replace(hour=sys_start.hour, minute=sys_start.minute, second=0, microsecond=0)] %}
        {% if is_state('person.ryan', 'home') %}
          {% set start_dates = start_dates + [(strptime(states('sensor.ballam_next_alarm'),'%Y-%m-%dT%H:%M:%S.%fZ')|as_local())] %}
        {% endif %}
        {% if is_state('person.jeanette', 'home') %}
          {% set start_dates = start_dates + [now().replace(hour=j_start.hour, minute=j_start.minute, second=0, microsecond=0)] %}
        {% endif %}
        {{ (start_dates | min).isoformat() }}
    system_start_next:
      friendly_name: Next Day Start
      device_class: timestamp
      value_template: >-
        {% set j_start = (strptime(states('input_datetime.jeanette_start_time'), '%H:%M:%S')) %}
        {% set sys_start = (strptime(states('input_datetime.system_start_time'), '%H:%M:%S')) %}
        {% set start_dates =[(now() + timedelta(days=1)).replace(hour=sys_start.hour, minute=sys_start.minute, second=0, microsecond=0)] %}
        {% if is_state('person.ryan', 'home') %}
          {% set start_dates = start_dates + [(strptime(states('sensor.ballam_next_alarm'),'%Y-%m-%dT%H:%M:%S.%fZ')|as_local())] %}
        {% endif %}
        {% if is_state('person.jeanette', 'home') %}
          {% set start_dates = start_dates + [(now() + timedelta(days=1)).replace(hour=j_start.hour, minute=j_start.minute, second=0, microsecond=0)] %}
        {% endif %}
        {{ (start_dates | min).isoformat() }}
    calculated_system_sleep_time:
      friendly_name: Calculated Day End
      device_class: timestamp
      value_template: >-
        {% set sys_sleep = (strptime(states('input_datetime.system_sleep_time'), '%H:%M:%S')) %}
        {{ now().replace(hour=sys_sleep.hour, minute=sys_sleep.minute, second=0, microsecond=0).isoformat() }}
    xbox_source: 
      value_template: "{{ state_attr('media_player.xboxone_2', 'media_title') }}" 
      friendly_name: 'Xbox Source'
    water_heater_start_time:
      friendly_name: Water Heater Start Time
      device_class: timestamp
      value_template: "{{ (strptime(states('sensor.calculated_system_start_time'), '%Y-%m-%dT%H:%M:%S%z') - timedelta(hours=1, minutes=30)).isoformat() }}"
    coffee_start_time:
      friendly_name: Coffee Start Time
      device_class: timestamp
      value_template: "{{ (strptime(states('sensor.calculated_system_start_time'), '%Y-%m-%dT%H:%M:%S%z') - timedelta(minutes=15)).isoformat() }}"
    outdoor_lights_on:
      friendly_name: Outdoor Lights On Time
      device_class: timestamp
      value_template: "{{ (strptime(states('sensor.calculated_system_start_time'), '%Y-%m-%dT%H:%M:%S%z') + timedelta(minutes=15)).isoformat() }}"
    water_heater_off_time:
      friendly_name: Water Heater off Time
      device_class: timestamp
      value_template: "{{ (strptime(states('sensor.calculated_system_sleep_time'), '%Y-%m-%dT%H:%M:%S%z') - timedelta(hours=1)).isoformat() }}"
    coffee_off_time:
      friendly_name: Coffee off Time
      device_class: timestamp
      value_template: >-
        {% if is_state('person.ryan', 'home') %}
          {{ (strptime(states('sensor.calculated_system_sleep_time'), '%Y-%m-%dT%H:%M:%S%z') - timedelta(hours=2)).isoformat() }}
        {% else  %}
          {{ (strptime(states('sensor.calculated_system_sleep_time'), '%Y-%m-%dT%H:%M:%S%z') - timedelta(hours=8)).isoformat() }}
        {% endif %}
    bedroom_lights_off_time:
      device_class: timestamp
      friendly_name: Bedroom Lights off Time
      value_template: "{{ (strptime(states('sensor.calculated_system_sleep_time'), '%Y-%m-%dT%H:%M:%S%z') + timedelta(minutes=15)).isoformat() }}"
    water_heater_time_to_temp:
      value_template: >-
          {% if ((((333.2*(140.0-states('sensor.zha_40c04dcb_3_1026')|float))/3412.142)/4.5)*60)|round(0) < 0 %}
              0
          {% else %}
              {{((((333.2*(140.0-states('sensor.zha_40c04dcb_3_1026')|float))/3412.142)/4.5)*60)|round(0)}} 
          {% endif %}
      friendly_name: 'Water Heater: Time to Temp'
      unit_of_measurement: 'Min'
